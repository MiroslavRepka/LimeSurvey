name: CI pipeline for LimeSurvey
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  CI-pipeline:
    runs-on: ubuntu-20.04    # ubuntu runner hosted by Github
    strategy:
      matrix:
        php-versions: ['7.2'] #, '8.0']
    # Env vars for this job
    env:
      DBENGINE: INNODB
    name: PHP ${{ matrix.php-versions }} # Check each version of php specified in matrix
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Start the MySQL service - https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#mysql 
      - name: Start the MySQL service
        run: |
          sudo systemctl start mysql.service

      - name: Initilize and check all dependencies
        run: |
          # Before running composer install, check that the autoloader is up-to-date and all classes can be loaded.
          php tests/check_autoloader.php

          # Test
          #- sudo apt-get update
          #- sudo apt-get upgrade
          echo $archive_url
          php -r 'var_dump(PHP_INT_SIZE);'
      
          # Install LimeSurvey.
          php -m  # Spit out all loaded PHP modules
          mysql --version
          sudo service mysql status
          touch enabletests
          # NB: PHPUnit 6.5.* is installed with composer.
          composer install -vvv
          ./third_party/bin/phpunit --version

          chmod -R 777 tmp
          chmod -R 777 upload
          chmod -R 777 themes  # Need 777 so both console and web server can cd into the folder.
          chmod -R 777 tests/tmp
          chmod +x tests/bin/lint-*

          # InnoDb needs large_file_prefix & Barracuda file format
          # https://discuss.gogs.io/t/solved-mysql-error-1064-while-running-first-install/1604
          #sudo service mysql status
          #mysql -uroot -proot -e "Show  variables like '%large%';"
          #mysql -uroot -proot -e "Show  variables like '%innodb%';"
          #mysql -uroot -proot -e "SET @@global.innodb_large_prefix = 1;"
          #mysql -uroot -proot -e "SET @@global.innodb_file_format =  Barracuda;"
          #mysql -uroot -proot -e "SET @@global.innodb_file_format_max =  Barracuda;"

          #mysql -uroot -proot -e "Show  variables like '%large%';"
          #mysql -uroot -proot -e "Show  variables like '%innodb_file%';"
          #mysql -uroot -proot -e "Show  variables like '%innodb_default%';"

          netstat --listening
          php application/commands/console.php install admin password TravisLS no@email.com verbose
          cp application/config/config-sample-mysql.php application/config/config.php
          # Enable debug=2 in config file. OBS: This assumes debug is on line 61.
          # TODO: Disable, a lines was added to config file and some tests started to fail.
          # NB: EmCache is always disabled when debug => 2
          # NB: There can be a difference in assets used when debug = 0 or 2 (minified version or not)
          # - sed -i '61s/.*/        "debug"=>2,/' application/config/config.php
          # - cat application/config/config.php
    
          # Install Apache.
          # Code fetched from https://docs.travis-ci.com/user/languages/php/#Apache-%2B-PHP
          sudo apt-get update > /dev/null
          wget https://mirrors.edge.kernel.org/ubuntu/pool/multiverse/liba/libapache-mod-fastcgi/libapache2-mod-fastcgi_2.4.7~0910052141-1.2_amd64.deb
          sudo dpkg -i libapache2-mod-fastcgi_2.4.7~0910052141-1.2_amd64.deb
          sudo apt-get -y --force-yes install apache2 nodejs firefox
          sudo cp /usr/bin/firefox /usr/local/bin/firefox
          sudo cp /usr/bin/firefox /usr/local/bin/firefox-bin
          which firefox
          firefox -v

          sudo service apache2 restart

          # This will run syntax check, CodeSniffer, MessDetector, etc
          composer test

          # Test server.
          wget localhost
          cat index.html

          # Chromedriver setup.
          # Note: Keep getting timeout problems on Travis with chromedriver.
          #- wget https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip
          #- unzip chromedriver_linux64.zip

          # Setup Selenium with Firefox headless mode.
          wget "https://selenium-release.storage.googleapis.com/3.7/selenium-server-standalone-3.7.1.jar"
          wget "https://github.com/mozilla/geckodriver/releases/download/v0.27.0/geckodriver-v0.27.0-linux64.tar.gz"
          tar xvzf geckodriver-v0.27.0-linux64.tar.gz
          export MOZ_HEADLESS=1
          java -jar selenium-server-standalone-3.7.1.jar -enablePassThrough false > /dev/null 2> /dev/null &

          echo "Preparing node.js components"
          # Prepare the packages that need to be tested
          #nvm install 10.16.3
          #nvm use 10.16.3
          node ./buildVueComponents.js -s adminbasics -p
      - name: Run the test script
        run: |
          DOMAIN=localhost ./third_party/bin/phpunit --testdox --stop-on-failure
          yarn --cwd ./assets/packages/adminbasics run test

  
